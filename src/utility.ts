import { FieldValidator } from "final-form";

export const EMPTY_FILTER = `without`;
export const DEFAULT_SORTING = `byName`;

export const vocabularyPosts = {
  [EMPTY_FILTER]: `–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏`,
  driver: `üöó –í–æ–¥–∏—Ç–µ–ª—å`,
  waiter: `üíÅ –û—Ñ–∏—Ü–∏–∞–Ω—Ç`,
  cook: `üë©üèΩ‚Äçüç≥ –ü–æ–≤–∞—Ä`
}

export const dateLongStringOptions = {
  year: `numeric`,
  month: `long`,
  day: `numeric`
}

export const dateShortStringOptions = {
  year: `2-digit`,
  month: `2-digit`,
  day: `2-digit`
}

export const sortingVariants = [
  {
    name: `–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞`,
    type: `byName`,
    isDisabled: false
  },
  {
    name: `–î–æ–ª–∂–Ω–æ—Å—Ç—å`,
    type: ``,
    isDisabled: true
  },
  {
    name: `–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è`,
    type: `byBirthday`,
    isDisabled: false
  }
]

const phonePattern = `\\+7 \\([0-9]{3}\\) [0-9]{3}-[0-9]{4}`
const birthdayPattern = `[0-9]{4}-[0-9]{2}-[0-9]{2}`

const required = (value): string | undefined =>
  (value ? undefined : `–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);

const validatePhone = (value): string | undefined => {
  const idealPhone = new RegExp(phonePattern);

  if (idealPhone.test(value)) {
    return undefined;
  }
  return `–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (999) 999-9999`
}

const validateBirthday = (value): string | undefined => {
  const idealBirthday = new RegExp(birthdayPattern);

  if (idealBirthday.test(value)) {
    return undefined;
  }
  return `–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î`
}

const composeValidators = (...validators): FieldValidator<string> => (value): string | undefined =>
  validators.reduce((error, validator): string | undefined => error || validator(value), undefined)


export const paramsInput = [
  {
    fieldName: `name`,
    labelName: `–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞`,
    typeInput: `text`,
    placeholder: `–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤`,
    validate: required
  },
  {
    fieldName: `phone`,
    labelName: `–¢–µ–ª–µ—Ñ–æ–Ω`,
    typeInput: `phone`,
    placeholder: `+7 (999) 999-9999`,
    pattern: phonePattern,
    validate: composeValidators(required, validatePhone)
  },
  {
    fieldName: `birthday`,
    labelName: `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è`,
    typeInput: `date`,
    pattern: birthdayPattern,
    validate: composeValidators(required, validateBirthday)
  }
]

export const addZero = (number: number): string =>
  String(number).padStart(2, `0`);
